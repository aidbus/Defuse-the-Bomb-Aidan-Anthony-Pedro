class Button(PhaseThread):
    def __init__(self, component_state, component_rgb, target, color, keypad_target, name="Button"):
        super().__init__(name, component_state, target)
        # the default value is False/Released
        self._value = False
        # has the pushbutton been pressed?
        self._pressed = False
        # we need the pushbutton's RGB pins to set its color
        self._rgb = component_rgb
        # the pushbutton's randomly selected LED color
        self._color = color
        # define the number of clicks required to defuse based on color
        keypad_str = str(keypad_target)
        first_digit = int(keypad_str[0])
        last_digit = int(keypad_str[-1])

        if color == "R":
            self._clicks_required = last_digit
        elif color == "B":
            self._clicks_required = first_digit
        elif color == "G":
            self._clicks_required = first_digit + last_digit
        else:
            # Default or error handling for unexpected colors
            self._clicks_required = 1

        # Handle the case when clicks required turns out to be 0
        if self._clicks_required == 0:
            self._clicks_required = [some_default_value]

        # Count the number of clicks
        self._click_count = 0

        # Debug line
        print(f"DEBUG: Button color: {color}, Keypad target: {keypad_target}, Clicks required: {self._clicks_required}")
